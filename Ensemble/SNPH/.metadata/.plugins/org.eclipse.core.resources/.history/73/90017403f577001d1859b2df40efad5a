package algorithms;

import org.apache.commons.math.distribution.ChiSquaredDistribution;
import org.apache.commons.math.distribution.ChiSquaredDistributionImpl;

import weka.core.Utils;

public class postProcessing extends BasicAlg{
	
	public postProcessing(String path) throws Exception{
		ReadWholeGnomeData(path);
	}
	
    public double chi_square(int[] selectedSNPSet){
    	
		int k = selectedSNPSet.length;
		
		int comb = (int)Math.pow(3.0, k);
		double[][] observedValues = new double[2][comb];
		double[]   colSumTable = new double[comb]; 
		double[][] expectedValues = new double[2][comb]; 
		
		for(int i=0;i<comb;i++){
			observedValues[0][i] = 0;
			observedValues[1][i] = 0;
			colSumTable[i] = 0;
		}
		
		/*constructing observed freq table*/
		for(int i=0;i<rowCount;i++){
			int index = 0;
			boolean cont = true;
			loop:for(int j=0;j<k;j++){
				if(data[i][2*selectedSNPSet[j]] && data[i][2*selectedSNPSet[j]+1]){
					cont = false;
					break loop;
				}else{
					int val = 0;
					if(!data[i][2*selectedSNPSet[j]] && data[i][2*selectedSNPSet[j]+1]){
						val =1;
					}
					if(data[i][2*selectedSNPSet[j]] && !data[i][2*selectedSNPSet[j]+1]){
						val =2;
					}
					index = index + val*(int)Math.pow(3.0,(k-1-j));
				}
			}
			
			if(cont){
				if(!data[i][2*(colCount-1)] && !data[i][2*colCount-1]){
					observedValues[0][index]++;
				}else{
					observedValues[1][index]++;
				}
				colSumTable[index]++;
			}
		}
		
		/*
		if(selectedSNPSet[0]==14 && selectedSNPSet[1]==22){
		for(int i=0;i<comb;i++){
			System.out.println(observedValues[0][i]+"\t"+observedValues[1][i]+"\t"+colSumTable[i]);
		}
		}
		System.out.println("=====");
		*/
		
		/*computing expected freq values and compute chi-square value*/
		double x2 = 0;
		for(int i=0;i<comb;i++){
			expectedValues[0][i] = colSumTable[i]*classValues[0]/(double)rowCount;
			expectedValues[1][i] = colSumTable[i]*classValues[1]/(double)rowCount;
			
			if(expectedValues[0][i]!=0){
				x2 = x2 + (expectedValues[0][i]-observedValues[0][i])*(expectedValues[0][i]-observedValues[0][i])
		           /expectedValues[0][i];
			}

			if(expectedValues[1][i]!=0){
				x2 = x2 + (expectedValues[1][i]-observedValues[1][i])*(expectedValues[1][i]-observedValues[1][i])
		           /expectedValues[1][i];
			}

		}
	   
		return x2; 
    }
    
    
    public double getObjectiveValue(int[] selectedSNPSet) throws Exception{
		  
		  int k = selectedSNPSet.length;
		  
		  double value =0;
		    
	     value = chi_square(selectedSNPSet);
		 
		  return value;
	}
	
	public void run(){
	    
		double[] singleChiSquareValue =new double[colCount];
		int[] selectedSNPSet = new int[1];
		
		for(int i=0; i<colCount-1; i++) {
	    	
			selectedSNPSet[0] = i; 
			
			
			double orginalValue = getObjectiveValue(selectedSNPSet);
	    	  	    	  
	          double tmp = -Double.MAX_VALUE;
	          int tmpPos = -1;
	          
	          
	          for(int j=0;j<k;j++){
	        	  
	        	  if(testFeasibility (selectedSNPSet,j,i)){
		        	  double cur =getChangedObjectValue(orginalValue,selectedSNPSet,j,i);
		        	  if(tmp<cur){
		        		  tmp=cur;
		        		  tmpPos = j;
		        	  }
	        	  }
	          }
	         
	          if(tmp>0){
	        	  hasSwap = true;
	        
	        	  /*Swap happens*/
	        	  indicator[i] = 1;
	        	  indicator[selectedSNPSet[tmpPos]]=0;
	        	  selectedSNPSet[tmpPos] = i;
	  
	        	  swap++;
	        	  //System.out.println(orginalValue);
	        	  orginalValue = getObjectiveValue(selectedSNPSet);
	        	  				        	  
	        	  System.out.print(orginalValue+" (");
	        	  for(int h=0;h<k;h++){
	        		  System.out.print(selectedSNPSet[h]+",");
	        	  }
	        	  System.out.print(")"+" || ");
	        	  
				  ChiSquaredDistribution distribution = new ChiSquaredDistributionImpl(Math.pow(3, k)-1);
				  double pvalue = 1-distribution.cumulativeProbability(orginalValue);
				  System.out.println("p value:"+pvalue);
	          }
	       }
	   }
   }

	for(int h=0;h<k;h++){
		deletedSNP.put(new Integer(selectedSNPSet[h]), new Integer(1));
	}
		
		
	}
		
	
	public static void main(String[] args) throws Exception{
		

	}
}
