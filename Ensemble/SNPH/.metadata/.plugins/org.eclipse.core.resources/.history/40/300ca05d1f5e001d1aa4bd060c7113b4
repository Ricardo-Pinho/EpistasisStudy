package algorithms;

import java.util.Hashtable;
import java.util.Random;
import java.util.StringTokenizer;
import java.util.Enumeration;
import java.io.*;
import java.util.*;

public class BasicAlg {

	  public int colCount=0;
	  public int rowCount=0;
	  public boolean[][] data = null;
	  
	  public String[] SNPNames;
	  
	  public int[] classValues;
	  
	  boolean hasColumnName = false;
	  
	  String separator = " ";
	  
	  public void ReadData(String path) {
	   
		FileReader in = null;
	    BufferedReader d = null;
	    StringTokenizer token = null;
	    
	    try {
	      in = new FileReader(path);
	    }
	    catch (FileNotFoundException ex) {
	      ex.printStackTrace();
	    }
	    d = new BufferedReader(in);
	    try {
	    
	    	String tuple = d.readLine();
	    	if(tuple.contains(",")){
	    		separator = ",";
	    	}
	    	
	      token = new StringTokenizer(tuple,separator);
	      String str = token.nextToken();
	      if(str.length()>2){
	    	  hasColumnName = true;
	      }
	      
	      rowCount++;
	    }
	    catch (IOException ex4) {
	    }
	    
	    
	    try {
	      while (d.readLine() != null) {
	        rowCount++;
	      }
	    }
	    catch (IOException ex2) {
	      ex2.printStackTrace() ;
	    }

	    try {
	      in.close();
	      in = new FileReader(path);
	    }
	    catch (Exception ex3) {
	      ex3.printStackTrace() ;
	    }
	    
	    d = new BufferedReader(in);
	    colCount = token.countTokens()+1;
	    SNPNames = new String[colCount];
	    
	    if(!hasColumnName){
	    	data = new boolean[rowCount][2*colCount];
    		for (int j = 0; j < colCount; j++) {
    			SNPNames[j] = new Integer(j).toString();
    		}
	    }else{
	    	data = new boolean[rowCount-1][2*colCount];
	    }
	    
	    
	    
	    classValues = new int[2];
	    classValues[0] = 0;
	    classValues[1] = 0;

	    System.out.println(colCount+":"+rowCount);
	    System.out.println("has title:"+hasColumnName);
	    
	    for (int i = 0; i < rowCount; i++) {
	      
	    	try {
	    		String tuple = d.readLine();
	    	
	    		token = new StringTokenizer(tuple, separator);
	    		
	    		//System.out.println(token.countTokens());
	    	}
	    	catch (IOException ex1) {
	    		ex1.printStackTrace();
	    	}
	    	
	    	if(!hasColumnName){
	    		for (int j = 0; j < 2*colCount; j++) {
	    			String tmp=token.nextToken();
	    			if(j==2*colCount-2){  //class attribute
	    				classValues[new Integer(tmp).intValue()]++;
	    			}
	    			
	    			if(tmp!=null){
	    				data[i][j]=true; data[i][j+1]=true;
	    				int value = new Integer(tmp).intValue();
	    				if(value==0){
	    					data[i][j]=false; data[i][j+1]=false;
	    				}
	    				if(value==1){
	    					data[i][j]=false; data[i][j+1]=true;
	    				}
	    				if(value==2){
	    					data[i][j]=true; data[i][j+1]=false;
	    				}
	    				
	    			}
	    			j++;
	    		}
	  	    }else{ //real data
	  	    	if(i==0){//first line, column title
		    		for (int j = 0; j < colCount; j++) {
		    			String tmp=token.nextToken();
		    			SNPNames[j] = tmp+"_"+j;
		    		}
	  	    	}else{
		    		for (int j = 0; j < 2*colCount; j++) {
		    			String tmp=token.nextToken();
		    			
		    			if(j==2*colCount-2){  //class attribute
		    				classValues[new Integer(tmp).intValue()]++;
		    			}
		    			
		    			if(tmp!=null){
		    				data[i-1][j]=true; data[i-1][j+1]=true;
		    				int value = new Integer(tmp).intValue();
		    				if(value==0){
		    					data[i-1][j]=false; data[i-1][j+1]=false;
		    				}
		    				if(value==1){
		    					data[i-1][j]=false; data[i-1][j+1]=true;
		    				}
		    				if(value==2){
		    					data[i-1][j]=true; data[i-1][j+1]=false;
		    				}
		    				
		    			}
		    			j++;
		    			
		    		}
	  	    	}
	  	    }
	    }
	    
		  if(hasColumnName){
			  rowCount = rowCount-1;
		  }
	  }
	  
	  
	  public void ReadWholeGnomeData(String path) throws Exception{
		   
			FileReader in = null;
		    BufferedReader d = null;
		    StringTokenizer token = null;
		    hasColumnName = true;
		    separator = ",";
		    colCount =0;
		    int[] ccCount = new int[22];
		    
		    for(int i=0;i<22;i++){
		    	//System.out.println(i);
		    	if(i==8){
		    		continue;
		    	}
		    	  in = new FileReader(path+"chr"+(i+1)+".txt");
		    	  d = new BufferedReader(in);
		    	  String tuple = d.readLine();
			      token = new StringTokenizer(tuple,separator);
			      ccCount[i] = token.countTokens();
			      colCount = colCount + ccCount[i]-1;
			      in.close();
		    }
		    
		    colCount = colCount +1;
		    rowCount =0;
		    in = new FileReader(path+"chr1"+".txt");
		    d = new BufferedReader(in);
		    while (d.readLine() != null) {
		    	rowCount++;
			}
		    in.close();
		    
		    SNPNames = new String[colCount];
		    data = new boolean[rowCount-1][2*colCount];
		    
		    classValues = new int[2];
		    classValues[0] = 0;
		    classValues[1] = 0;

		    System.out.println(colCount+":"+rowCount);
		    System.out.println("has title:"+hasColumnName);
		    
		    int start = 0;
		    int startName =0;
		    for(int c=0;c<22;c++){
		    	if(c==8){
		    		continue;
		    	}
		    	
		    	in = new FileReader(path+"chr"+(c+1)+".txt");
		    	d = new BufferedReader(in);
		    	
			    for (int i = 0; i < rowCount; i++) {
			    	
			    	String tuple = d.readLine();
			    	token = new StringTokenizer(tuple, separator);

		  	    	if(i==0){//first line, column title
			    		for (int j = 0; j < ccCount[c]-1; j++) {
			    			String tmp=token.nextToken();
			    			SNPNames[startName+j] = tmp+"_chr"+(c+1)+"_"+j;
			    		}
		  	    	}else{
			    		for (int j = 0; j < 2*ccCount[c]; j++) {
			    			String tmp=token.nextToken();
			    			
			    			if(j==2*ccCount[c]-2 && c==21){  //class attribute
			    				classValues[new Integer(tmp).intValue()]++;
			    				//System.out.println(classValues[new Integer(tmp).intValue()]);
			    			}
			    			
			    			if(c==21 || j!=2*ccCount[c]-2){
			    				data[i-1][start+j]=true; data[i-1][start+j+1]=true;
			    				int value = new Integer(tmp).intValue();
			    				if(value==0){
			    					data[i-1][start+j]=false; data[i-1][start+j+1]=false;
			    				}
			    				if(value==1){
			    					data[i-1][start+j]=false; data[i-1][start+j+1]=true;
			    				}
			    				if(value==2){
			    					data[i-1][j]=true; data[i-1][j+1]=false;
			    				}
			    				
			    			}
			    			j++;
			    			//System.out.println(j);
			    			
			    		}
		  	    	}
		  	    }
			    
			    start = start+2*ccCount[c]-2;
			    startName = startName+ccCount[c]-1;
		    	in.close();
		    }
		    
			if(hasColumnName){
				  rowCount = rowCount-1;
			}
	  }

	  
	  public int getColCount() {
		  return colCount;
	  }
	  
	  public int getRowCount() {
		  return rowCount;
	  }

	  public boolean[][] readFromDataFile() {
		  return data;
	  }

	  public int[] getClassValues(){
		  return classValues;
	  }
	  
	  	  
	  double pValueThreshold=-1;
	  
	  

	}
